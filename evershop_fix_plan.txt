# EverShop Admin Login and System Architecture Guide

## Introduction

This document provides a comprehensive overview of the EverShop platform's architecture, with a specific focus on its authentication systems. It details the root causes of the recent login and build issues and provides a clear, step-by-step guide to correctly implement a hardcoded admin user in a clean version of the project.

---

## Part 1: EverShop System Architecture

- **Tech Stack:** Node.js backend with Express.js, Next.js for the frontend (React), and PostgreSQL for the database.
- **Monorepo Structure:** The project is a monorepo managed by npm workspaces. The core application logic is in `packages/evershop`.
- **Build Process:**
  - The application uses SWC (Speedy Web Compiler) to transpile modern JavaScript/TypeScript from the `src` directory into a production-ready `dist` directory.
  - The `npm run compile` script in `package.json` orchestrates this process.
  - **Critical Point:** The build process must be correctly configured to handle all file types. As we discovered, it can fail to copy non-TypeScript files (like plain `.js` files in a `lib` directory) if not explicitly told to.
- **Middleware Pattern:** The Express.js backend relies heavily on a middleware pattern. Each request passes through a chain of functions that can inspect, modify, or terminate the request. This is crucial for authentication.

---

## Part 2: Authentication Systems

- **Core Principle: Stateful Authentication:** EverShop uses a stateful authentication model. This means that for a user to be considered logged in, two conditions must be met:
  1. A valid session cookie exists in the user's browser.
  2. The user ID from that session corresponds to a **real user record in the database**.

- **Admin Login Flow (`/admin/login`)**
  1. **Submission:** The user submits credentials to the `/admin/loginJson` API endpoint.
  2. **Validation:** The `[bodyParser]logIn.js` middleware calls the `loginUserWithEmail` service function.
  3. **Authentication (`loginUserWithEmail.js`):** This function queries the `admin_user` table, finds the user by email, and compares the password hash.
  4. **Session Creation:** If successful, the `admin_user_id` is stored in the server-side session, and a session cookie is sent to the browser.
  5. **Redirect:** The user is redirected to the admin dashboard.

- **Admin Page Authorization (The "Security Guard")**
  1. **Middleware Trigger:** When requesting any page under `/admin`, the `[context]auth.js` middleware runs first.
  2. **Session Check:** It reads the `userID` from the session cookie.
  3. **Database Verification:** It takes this `userID` and queries the `admin_user` table to fetch the full user object. **This is the most critical step.**
  4. **Grant/Deny Access:** If a user is found, access is granted. If not, the middleware assumes the session is invalid and redirects to the login page.

---

## Part 3: Analysis of Past Errors and Prevention

1.  **The Infinite Redirect Loop:**
    - **Cause:** A stateless hardcoded login. We checked the password but never created the user in the database. The login page said "yes," but the dashboard's middleware said "no" because the user wasn't in the database master list.
    - **Prevention:** Any hardcoded login logic **must** ensure the corresponding user exists in the database before the session is considered fully valid.

2.  **The Blank Dashboard Page (Hydration Error):**
    - **Cause:** An inconsistency between the server-rendered page and the client-side React application. The server sent HTML for a logged-in user, but the client-side JavaScript determined the user was logged out, causing React to halt rendering.
    - **Prevention:** Ensure the user's authentication state is consistent. Fixing the root redirect loop issue automatically fixes this.

3.  **The Build Failure (`ERR_MODULE_NOT_FOUND`):**
    - **Cause:** The project's build system (SWC) was not configured to copy the plain JavaScript files located in `packages/evershop/src/lib` into the final `dist` folder.
    - **Prevention:** Always verify the build process. The fix is to modify the `compile` script in `package.json` to explicitly copy these files.

---

## Part 4: Definitive Guide to Hardcode an Admin Login

This is the step-by-step plan to implement this feature correctly on a fresh copy of the project.

**Step 1: Add Necessary Dependencies**

The user creation logic requires a unique ID (`uuid`) and a file copying utility (`copyfiles`).

- **Action:** In the root `package.json`, add the following two lines to the `devDependencies` section:
  ```json
  "uuid": "^9.0.0",
  "copyfiles": "^2.4.1"
  ```

**Step 2: Fix the Build Script**

- **Action:** Modify the `compile` script in the root `package.json` to use `copyfiles`.
  - **Find this line:**
    `"compile": "cd ./packages/postgres-query-builder && npm run compile && cd ../../ && rimraf ./packages/evershop/dist && cd ./packages/evershop && swc ./src/ -d dist/ --config-file .swcrc --copy-files --strip-leading-paths",`
  - **Replace it with this:**
    `"compile": "cd ./packages/postgres-query-builder && npm run compile && cd ../../ && rimraf ./packages/evershop/dist && cd ./packages/evershop && swc ./src/ -d dist/ --config-file .swcrc --copy-files --strip-leading-paths && copyfiles -u 1 \"src/lib/**/*.js\" dist",`

**Step 3: Implement the Smart Login Logic**

This is the core of the fix. We will modify the `loginUserWithEmail` function to create the admin user on the first login.

- **File to Edit:** `packages/evershop/src/modules/auth/services/loginUserWithEmail.js`
- **Action:** Replace the entire content of this file with the following robust code:

```javascript
import { select, insert } from '@evershop/postgres-query-builder';
import { v4 as uuidv4 } from 'uuid';
import { pool } from '../../../lib/postgres/connection.js';
import { comparePassword, hashPassword } from '../../../lib/util/password.js';

export function loginUserWithEmail(email, password, callback) {
  const hardcodedEmail = 'khoualdiyassin26@gmail.com';
  const hardcodedPassword = 'admin123';

  // This is the standard login function that will be called after we ensure the user exists.
  const standardLogin = () => {
    select()
      .from('admin_user')
      .where('email', 'ILIKE', email)
      .and('status', '=', 1)
      .load(pool)
      .then((user) => {
        if (!user) {
          return Promise.reject(new Error('Invalid email or password'));
        }
        return comparePassword(password, user.password).then((result) => {
          if (!result) {
            return Promise.reject(new Error('Invalid email or password'));
          }
          return user;
        });
      })
      .then((user) => {
        this.session.userID = user.admin_user_id;
        delete user.password;
        this.locals.user = user;
        callback(null);
      })
      .catch((error) => {
        callback(error);
      });
  };

  // Special handling ONLY for the hardcoded admin user.
  if (email.toLowerCase() === hardcodedEmail) {
    select()
      .from('admin_user')
      .where('email', 'ILIKE', hardcodedEmail)
      .load(pool)
      .then((user) => {
        if (user) {
          // If user exists, proceed to normal login.
          standardLogin();
        } else {
          // If user does NOT exist, create it first.
          const hashedPassword = hashPassword(hardcodedPassword);
          insert('admin_user')
            .given({
              uuid: uuidv4(),
              email: hardcodedEmail,
              password: hashedPassword,
              status: 1,
              full_name: 'Hardcoded Admin'
            })
            .execute(pool)
            .then(() => {
              // After creating the user, proceed to normal login.
              standardLogin();
            })
            .catch((e) => callback(e)); // Pass any database insertion error back.
        }
      })
      .catch((e) => callback(e)); // Pass any database selection error back.
  } else {
    // For all other users, just do the standard login.
    standardLogin();
  }
}
```

---

## Conclusion

By following these three steps on a fresh project, the hardcoded admin login will be implemented correctly and robustly. The build system will be fixed, and the authentication logic will be in harmony with the stateful nature of the application, preventing all the errors we previously encountered.
